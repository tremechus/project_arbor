name: Deploy Client to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Build
        run: |
          cd client
          echo "🔨 Starting Vite build..."
          npm run build
        env:
          NODE_ENV: production
          
      - name: Comprehensive build verification
        run: |
          cd client
          echo "📁 Checking if dist directory exists..."
          if [ ! -d "dist" ]; then
            echo "❌ Error: dist directory was not created"
            exit 1
          fi
          
          echo "📂 Build output structure:"
          find dist -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -20
          
          echo ""
          echo "📄 Contents of index.html:"
          cat dist/index.html
          
          echo ""
          echo "📊 File sizes:"
          ls -lah dist/
          
          echo ""
          echo "🔍 JavaScript bundles:"
          find dist -name "*.js" -exec ls -lah {} \;
          
          echo ""
          echo "🎨 CSS files:"
          find dist -name "*.css" -exec ls -lah {} \;
          
          echo ""
          echo "✅ Build verification completed!"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist directory
          path: './client/dist'
          
      - name: List uploaded artifact contents
        run: |
          echo "🗂️ Contents being uploaded to GitHub Pages:"
          cd client
          find dist -type f | sort
          echo ""
          echo "📊 Total files: $(find dist -type f | wc -l)"
          echo "🔍 Key files check:"
          echo "- index.html: $(if [ -f dist/index.html ]; then echo '✅ Found'; else echo '❌ Missing'; fi)"
          echo "- JS files: $(find dist -name '*.js' | wc -l) files"
          echo "- CSS files: $(find dist -name '*.css' | wc -l) files"

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    # Only deploy on pushes to main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Verify deployment and test URLs
        run: |
          echo "🚀 Deployment successful!"
          echo "📍 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "🔗 Main App: https://tremechus.github.io/project_arbor/"
          echo "🧪 Debug Page: https://tremechus.github.io/project_arbor/debug.html"
          echo "📋 Test Page: https://tremechus.github.io/project_arbor/test.html"
          
          echo ""
          echo "🔍 Testing key URLs (this may take a moment for DNS propagation):"
          
          # Test main page
          if curl -s -o /dev/null -w "%{http_code}" "https://tremechus.github.io/project_arbor/" | grep -q "200"; then
            echo "✅ Main page: accessible"
          else
            echo "❌ Main page: not accessible"
          fi
          
          # Test debug page  
          if curl -s -o /dev/null -w "%{http_code}" "https://tremechus.github.io/project_arbor/debug.html" | grep -q "200"; then
            echo "✅ Debug page: accessible"
          else
            echo "❌ Debug page: not accessible"
          fi
